<?php

const GRUNFES_PICK_LOCK_UP_5 = '5minutes';
const GRUNFES_PICK_LOCK_UP_NIGHTBEFORE = '1159nightbefore';

const GRUNFES_PICK_LOCK_UP = [
  GRUNFES_PICK_LOCK_UP_5 => '-5 minutes',
  GRUNFES_PICK_LOCK_UP_NIGHTBEFORE => '-1 day',
];

function grunfes_menu() {
  $items = [];

  $items['my_picks/%'] = [
    'title' => t('My Picks Page'),
    'page arguments' => [1],
    'page callback' => 'grunfes_pick_pool',
    'access arguments' => ['access content'],
  ];

  $items['publish_picks'] = [
    'title' => t('Publish picks'),
    'page arguments' => [1],
    'page callback' => 'grunfes_publish_pick',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['node/%/reset'] = [
    'title' => t('Reset pool'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['grunfes_reset_pool_form', 1],
    'access callback' => 'grunfes_reset_pool_access',
    'access arguments' => ['node', 1],
    'type' => MENU_LOCAL_TASK,
  ];

  return $items;
}

function grunfes_reset_pool_form(&$form, $form_state, $gid) {
  $form['reset_pool_information'] = [
    '#markup' => '<p>Are you sure?</p>',
  ];

  $form['reset_pool_yes'] = [
    '#type' => 'submit',
    '#value' => t('Yes'),
    '#submit' => ['grunfes_reset_pool_submit'],
  ];

  $form['reset_pool_gid'] = [
    '#type' => 'hidden',
    '#value' => $gid,
  ];

  return $form;
}

function grunfes_reset_pool_submit(&$form, $form_state) {
  $gid = $form_state['values']['reset_pool_gid'];
  $group = entity_load_single('node', $gid);
  $group_entity = entity_metadata_wrapper('node', $group);

  if ($group) {
    $group_entity->field_closed->set(FALSE);
    $group_entity->field_matches_to_pick->set([]);
    $group_entity->save();

    /*
     * Delete user scores.
     */

    /** @var \DatabaseStatementBase $query */
    $query = db_select('field_data_field_pool_id', 'pool')
      ->fields('pool', ['entity_id'])
      ->condition('field_pool_id_value', $gid)
      ->condition('entity_type', 'leaderboard_score')
      ->execute();

    $result = array_values($query->fetchCol(0));
    entity_delete_multiple('leaderboard_score', $result);

    /**
     * Delete user picks
     */
    $query = db_select('field_data_field_pool_id', 'pool')
      ->fields('node', ['nid'])
      ->condition('field_pool_id_value', $gid)
      ->condition('bundle', 'user_pick');

    $query->innerJoin('node', 'node', 'pool.entity_id = node.nid');
    $result = array_values($query->execute()->fetchCol(0));
    entity_delete_multiple('node', $result);
  }

  drupal_goto(
    drupal_get_path_alias("node/{$gid}")
  );
}

function grunfes_reset_pool_access($group_type, $gid) {
  $group = entity_load_single($group_type, $gid);
  if (!$group || !og_is_group($group_type, $gid)) {
    return FALSE;
  }

  //  $group_closed = boolval($group->field_closed['und'][0]['value']);
  //  if (!$group_closed) {
  //    return FALSE;
  //  }

  global $user;

  if (!is_user_administrator() && $group->uid !== $user->uid) {
    return FALSE;
  }

  return TRUE;
}

function grunfes_form_pool_node_form_alter(&$form, &$form_state, $form_id) {
  if (
    isset($form['field_matches_to_pick']['und']['#options']) &&
    count($form['field_matches_to_pick']['und']['#options']) > 0
  ) {
    $options = array_keys($form['field_matches_to_pick']['und']['#options']);
    $form['field_matches_to_pick']['und']['#default_value'] = $options;
    $form['field_matches_to_pick']['und']['#attributes'] = ['checked' => 'checked'];
  };
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function grunfes_form_match_node_form_alter(&$form, &$form_state, $form_id) {

  // Hide the start date.
  // Start date get's updated through rules.
  $form['field_start_date']['#access'] = TRUE;
}

/**
 * Implements hook_views_pre_view().
 */
function grunfes_views_pre_view(&$view, &$display_id, &$args) {
  /** @var \view $view */
  if ($view->name == 'view_matches_by_company' && $view->current_display == 'entityreference_1') {
    $tids = isset($_POST['field_company'])
      ? implode('+', $_POST['field_company']['und'])
      : '';

    $view->set_arguments([
      'tids' => $tids,
    ]);
  }
}

function grunfes_update_match_date($updated_show, $match_to_update) {
  $show_entity = entity_metadata_wrapper('node', $updated_show);
  $match_entity = entity_metadata_wrapper('node', $match_to_update);
  $match_entity->field_start_date->set($show_entity->field_start_date->value());
  $match_entity->save();
}

/**
 * Check if user is administrator.
 *
 * @return boolean
 */
function is_user_administrator() {
  global $user;
  return in_array('administrator', $user->roles);
}

function grunfes_is_new_pick($user_id, $pool_id) {
  $user_picks = grunfes_get_user_picks_by_pool($user_id, $pool_id);

  return count($user_picks) === 0;
}

function grunfes_get_user_picks_by_pool($user_id, $pool_id) {
  $query = db_select('node', 'n')
    ->condition('n.type', 'user_pick')
    ->condition('n.uid', $user_id)
    ->condition('fpid.field_pool_id_value', $pool_id);
  $query->addField('n', 'nid');

  $query->innerJoin('field_data_field_pool_id', 'fpid', 'n.nid = fpid.entity_id');

  return array_keys($query->execute()->fetchAllAssoc('nid'));
}

function grunfes_pick_pool($pool_id) {
  global $user;

  $post_data = $_POST;

  if (!isset($post_data['redirectUrl'])) {
    drupal_goto('/');
  }

  $pool_node = node_load($pool_id);
  $user_entity = entity_metadata_wrapper('user', $user);
  $pool_locked = boolval($pool_node->field_closed['und'][0]['value']);

  if ($pool_locked) {
    drupal_set_message('Pool closed. Unable to save picks.');
    drupal_goto($_POST['redirectUrl']);
  }

  $results = grunfes_get_user_picks_by_pool($user->uid, $pool_id);
  $is_new_pick = count($results) === 0;

  if (!og_is_member('node', $pool_id)) {
    drupal_set_message(
      t('Please subscribe to current pool to place your picks.'),
      'error'
    );
    drupal_goto($_POST['redirectUrl']);
  }

  $count = 0;

  foreach ($post_data as $key => $value) {
    if (strpos($key, 'match') === FALSE) {
      continue;
    }

    $match_id = explode('_', $key)[1];

    if ($is_new_pick) {
      $pick = entity_create('node', [
        'type' => 'user_pick',
      ]);

      $pick_entity = entity_metadata_wrapper('node', $pick);
      $pick_entity->title = $user->name . '-' . $pool_node->title . '-' . $match_id;
      $pick_entity->author = $user->uid;
      $pick_entity->field_pool_id = $pool_id;
      $pick_entity->field_match_id = $match_id;
      $pick_entity->field_team_picked = $value;
      $pick_entity->save();

      // Do we need this?
      // $user_entity->field_picks[] = $pick_entity->nid->value();
    }
    else {
      $pick = node_load($results[$count]);
      $pick_entity = entity_metadata_wrapper('node', $pick);
      $pick_entity->field_team_picked = $value;
      $pick_entity->save();
    }

    $count++;
  }

  if ($is_new_pick) {
    $user_entity->save();
  }

  drupal_set_message(t('Your picks has been saved'));
  drupal_goto($_POST['redirectUrl']);

  return [];
}

function grunfes_publish_pick($pool_id) {
  if (!is_user_administrator()) {
    drupal_goto('/');
  }

  $pool = node_load($pool_id);

  if ($pool === NULL) {
    drupal_goto('/');
  }

  $redirect_url = isset($_POST['redirectUrl'])
    ? $_POST['redirectUrl']
    : '/';

  $pool_closed = empty($pool->field_closed['und'][0]['value'])
    ? FALSE
    : $pool->field_closed['und'][0]['value'];

  if ($pool_closed) {
    drupal_set_message('Picks already published.');
    drupal_goto($redirect_url);
  }

  $pool_entity = entity_metadata_wrapper('node', $pool);
  $pool_entity->field_closed = TRUE;

  $admin_picks = grunfes_get_user_picks_by_pool(1, $pool_id);
  $pool_users = $pool_entity->members->value();

  foreach ($pool_users as $pool_user) {
    if (in_array('administrator', $pool_user->roles)) {
      continue;
    }

    $user_picks = grunfes_get_user_picks_by_pool($pool_user->uid, $pool_id);
    $user_points = grunfes_calculate_pick_points($admin_picks, $user_picks);

    $score = entity_create('leaderboard_score', [
      'type' => 'leaderboard_score',
    ]);

    $score_entity = entity_metadata_wrapper('leaderboard_score', $score);

    $score_entity->field_user = $pool_user->uid;
    $score_entity->field_score = $user_points;
    $score_entity->field_pool_id = $pool_id;

    $score_entity->save();

    drupal_set_message("User {$pool_user->name} earned {$user_points} points.");
  }

  $pool_entity->save();

  drupal_set_message('Picks published.');
  drupal_goto($redirect_url);
}

function grunfes_calculate_pick_points($admin_picks, $user_picks) {
  if (count($user_picks) === 0) {
    return 0;
  }

  $points = 0;
  $all_hits = TRUE;

  foreach ($admin_picks as $index => $value) {
    $admin_pick = node_load($value);
    $user_pick = node_load($user_picks[$index]);

    if ($user_pick === NULL) {
      $all_hits = FALSE;
      $points = 0;
      break;
    }

    $match = node_load($admin_pick->field_match_id['und'][0]['value']);
    $points_to_earn = intval($match->field_point_to_earn['und'][0]['value']);

    if (
      isset($admin_pick->field_team_picked['und'][0]['safe_value']) &&
      isset($user_pick->field_team_picked['und'][0]['safe_value'])
    ) {
      if (
        $admin_pick->field_team_picked['und'][0]['safe_value'] ==
        $user_pick->field_team_picked['und'][0]['safe_value']
      ) {
        $points += $points_to_earn;
      }
      else {
        $all_hits = FALSE;
      }
    }
  }

  if ($all_hits) {
    $points += 50;
  }

  return $points;
}

//function grunfes_reset_pool($admin_picks, $user_picks) {
//  if (count($user_picks) === 0) {
//    return 0;
//  }
//
//  $points = 0;
//  $all_hits = TRUE;
//
//  foreach ($admin_picks as $index => $value) {
//    $admin_pick = node_load($value);
//    $user_pick = node_load($user_picks[$index]);
//
//    $all_hits = FALSE;
//    $points = 0;
//    break;
//  }
//
//
//  return $points;
//}

function grunfes_fetch_pick($user_id, $pool_id, $match_id) {
  $query = db_select('node', 'n')
    ->condition('n.uid', $user_id)
    ->condition('fpid.field_pool_id_value', $pool_id)
    ->condition('mid.field_match_id_value', $match_id);
  $query->addField('tid', 'field_team_picked_value');
  $query->innerJoin('field_data_field_pool_id', 'fpid', 'n.nid = fpid.entity_id');
  $query->innerJoin('field_data_field_match_id', 'mid', 'n.nid = mid.entity_id');
  $query->innerJoin('field_revision_field_team_picked', 'tid', 'n.nid = tid.entity_id');

  $results = $query->execute()->fetchAssoc();

  return !isset($results['field_team_picked_value'])
    ? FALSE : $results['field_team_picked_value'];
}

function grunfes_render_matches($pool_id, $fields) {
  global $user;

  $pool = node_load($pool_id);
  $pool_locked = boolval($pool->field_closed['und'][0]['value']);
  $pick_lock_up = $pool->field_pick_lockup['und'][0]['value'];

  $team_keys = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];
  $html = '';
  $date_expired = TRUE;

  $match_id = $fields['field_team_a']->raw;
  $results = grunfes_fetch_pick($user->uid, $pool_id, $match_id);

  if (!$pool_locked) {
    $match_entity = entity_metadata_wrapper('node', $match_id);
    $match_timestamp = intval($match_entity->field_start_date->value());

    $now = new DateObject('now');
    $match_date = new DateObject();
    $match_date->setTimestamp($match_timestamp);
    $match_date->add(
      DateInterval::createFromDateString(
        GRUNFES_PICK_LOCK_UP[$pick_lock_up]));

    if ($pick_lock_up === GRUNFES_PICK_LOCK_UP_NIGHTBEFORE) {
      $match_date->setTime('23', '59');
    }

    $date_expired = $now->getTimestamp() >= $match_date->getTimestamp();
  }

  if ($date_expired) {
    $_SESSION['show_expired'] = TRUE;
  }

  foreach ($team_keys as $index => $value) {
    if (isset($fields["field_team_{$value}"]->content)) {
      $team = $fields["field_team_{$value}"];
      $is_checked = $results === $team->content;

      $is_disabled = $date_expired || $pool_id === FALSE || !og_is_member('node', $pool_id);

      if (is_user_administrator()) {
        $is_disabled = FALSE;
      }

      if ($results === FALSE && $index === 0) {
        $is_checked = TRUE;
      }

      $html .= grunfes_render_match($team, $is_checked, $is_disabled);
    }
  }

  return $html;
}

function grunfes_render_match($field_team, $is_checked, $is_disabled) {
  $match_id = $field_team->raw;

  $tpl = '<div class="left p5">{{input}}{{name}}</div>';

  $disabled = $is_disabled
    ? 'disabled'
    : '';

  $checked = $is_checked
    ? 'checked'
    : '';

  $input = "<input
    class=\"user-pick user-pick-input\"
    type=\"radio\"
    {$disabled}
    {$checked}
    name=\"match_{$match_id}\"
    value=\"{$field_team->content}\" />";

  return str_replace([
    '{{input}}',
    '{{name}}',
  ], [
    $input,
    $field_team->content,
  ], $tpl);
}

function grunfes_default_rules_configuration_alter(&$data) {
  $directory_iterator = new \DirectoryIterator(realpath(__DIR__ . '/rules'));

  foreach ($directory_iterator as $file_info) {
    if ($file_info->isFile() && $file_info->isReadable()) {
      $rulename = 'rules_' . pathinfo($file_info->getFilename(), PATHINFO_FILENAME);

      if (!isset($data[$rulename])) {
        $rule = file_get_contents($file_info->getPathname());
        $data[$rulename] = entity_import('rules_config', $rule);
      }
    }
  }
}

function grunfes_update_matches(&$node) {
  // $node_wrapper = entity_metadata_wrapper('node', $node);
  // $matches = [];

  // foreach($node_wrapper->field_matches_to_pick->getIterator() as $show) {
  //   foreach ($show->field_matches->getIterator() as $match) {
  //     $matches[] = array(
  //       'target_id' => $match->nid->value(),
  //     );
  //   }
  // }

  // $node_wrapper->field_matches_to_pick->set($matches);
  // $node->field_matches_to_pick['und'] = $matches;
  // node_save($node);


  // $node_wrapper->save();
}

function grunfes_entity_presave($entity, $type) {
  if ($type === 'node' && $entity->type === 'pool') {
    $node_wrapper = entity_metadata_wrapper('node', $entity);
    $matches = [];

    // Check if pool change is triggered from form.
    if (isset($_POST['form_id']) && $_POST['form_id'] === 'pool_node_form') {
      foreach ($node_wrapper->field_matches_to_pick->getIterator() as $show) {
        foreach ($show->field_matches->getIterator() as $match) {
          $matches[] = [
            'target_id' => $match->nid->value(),
          ];
        }
      }
      $entity->field_matches_to_pick['und'] = $matches;
    }
  }
}

function grunfes_wrapper_debug($w) {
  $values = [];
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}
